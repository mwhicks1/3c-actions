# This file is generated by generate-workflow.py. To update this file, update
# generate-workflow.py instead and re-run it. Some things in this file are
# explained by comments in generate-workflow.py.

name: Exhaustive testing and Performance Stats

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch or commit ID of correctcomputation/checkedc-clang to run workflow on"
        required: true
        default: "main"

env:
  benchmark_tar_dir: "/home/github/checkedc-benchmarks"
  builddir: "${{github.workspace}}/b/ninja"
  benchmark_conv_dir: "${{github.workspace}}/benchmark_conv"
  branch_for_scheduled_run: "main"
  port_tools: "${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/3c/utils/port_tools"

jobs:

  # Cleanup files left behind by prior runs
  clean:
    name: Clean
    runs-on: self-hosted
    steps:
      - name: Clean
        run: |
          rm -rf ${{env.benchmark_conv_dir}}
          mkdir -p ${{env.benchmark_conv_dir}}
          rm -rf ${{env.builddir}}
          mkdir -p ${{env.builddir}}
          rm -rf ${{github.workspace}}/depsfolder
          mkdir -p ${{github.workspace}}/depsfolder

  # Clone and build 3c and clang
  # (clang is needed to test compilation of converted benchmarks.)
  build_3c:
    name: Build 3c and clang
    needs: clean
    runs-on: self-hosted
    steps:
      - name: Check out the actions repository
        uses: actions/checkout@v2
        with:
          path: depsfolder/actions
      - name: Check that the workflow file is up to date with generate-workflow.py before running it
        run: |
          cd ${{github.workspace}}/depsfolder/actions
          ./generate-workflow.py
          git diff --exit-code

      - name: Branch or commit ID
        run: echo "${{ github.event.inputs.branch || env.branch_for_scheduled_run }}"
      - name: Check out the 3C repository and the Checked C system headers
        run: |
          git init ${{github.workspace}}/depsfolder/checkedc-clang
          cd ${{github.workspace}}/depsfolder/checkedc-clang
          git remote add origin https://github.com/correctcomputation/checkedc-clang
          git fetch --depth 1 origin "${{ github.event.inputs.branch || env.branch_for_scheduled_run }}"
          git checkout FETCH_HEAD
          # As of 2021-04-12, we're using CCI's `checkedc` repository because it
          # has a checked declaration for `syslog` that we want to use for our
          # experiments but have not yet submitted to Microsoft.
          git clone --depth 1 https://github.com/correctcomputation/checkedc ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc

      - name: Build 3c and clang
        run: |
          cd ${{env.builddir}}
          # We'll be running the tools enough that it's worth spending the extra
          # time for an optimized build, and the easiest way to do that is to
          # use a "release" build. But we do want assertions and we do want
          # debug info in order to get symbols in assertion stack traces, so we
          # use -DLLVM_ENABLE_ASSERTIONS=ON and the RelWithDebInfo build type,
          # respectively. Furthermore, the tools rely on the llvm-symbolizer
          # helper program to actually read the debug info and generate the
          # symbolized stack trace when an assertion failure occurs. We could
          # build it here, but as of 2021-03-15, we just use Ubuntu's version
          # installed systemwide; it seems that llvm-symbolizer is a generic
          # tool and the difference in versions does not matter.
          cmake -G Ninja \
            -DLLVM_TARGETS_TO_BUILD=X86 \
            -DCMAKE_BUILD_TYPE="RelWithDebInfo" \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DLLVM_OPTIMIZED_TABLEGEN=ON \
            -DLLVM_USE_SPLIT_DWARF=ON \
            -DLLVM_ENABLE_PROJECTS="clang" \
            ${{github.workspace}}/depsfolder/checkedc-clang/llvm
          ninja -l $(nproc) 3c clang
          chmod -R 777 ${{github.workspace}}/depsfolder
          chmod -R 777 ${{env.builddir}}

  # Run Test for 3C
  test_3c:
    name: 3C regression tests
    needs: build_3c
    runs-on: self-hosted
    steps:
      - name: 3C regression tests
        run: |
          cd ${{env.builddir}}
          ninja -l $(nproc) check-3c

  # Convert our benchmark programs

  test_libarchive_no_expand_macros_no_alltypes:
    name: Test LibArchive (not macro-expanded, no -alltypes)
    needs: build_3c
    runs-on: self-hosted
    steps:
      - name: Build LibArchive
        run: |
          mkdir -p ${{env.benchmark_conv_dir}}/no_expand_macros_no_alltypes
          cd ${{env.benchmark_conv_dir}}/no_expand_macros_no_alltypes
          tar -xvzf ${{env.benchmark_tar_dir}}/libarchive-3.4.3.tar.gz
          cd libarchive-3.4.3
          cd build
          cmake -DCMAKE_C_COMPILER=${{env.builddir}}/bin/clang -G Ninja -DCMAKE_C_FLAGS="-w -ferror-limit=0 -D_GNU_SOURCE" ..
          bear ninja -l $(nproc) archive

      - name: Convert LibArchive
        run: |
          cd ${{env.benchmark_conv_dir}}/no_expand_macros_no_alltypes/libarchive-3.4.3
          ${{env.port_tools}}/convert_project.py \
            --skip '/.*/(test|test_utils|tar|cat|cpio|examples|contrib|libarchive_fe)/.*' \
            --prog_name ${{env.builddir}}/bin/3c \
            --project_path . \
            --build_dir build

      - name: Copy 3c stats of LibArchive
        run: |
          cd ${{env.benchmark_conv_dir}}/no_expand_macros_no_alltypes/libarchive-3.4.3
          mkdir 3c_performance_stats/
          cp *.json 3c_performance_stats/

      - name: Upload 3c stats of LibArchive
        uses: actions/upload-artifact@v2
        with:
          name: LibArchive_no_expand_macros_no_alltypes
          path: ${{env.benchmark_conv_dir}}/no_expand_macros_no_alltypes/libarchive-3.4.3/3c_performance_stats/
          retention-days: 5

  test_libarchive_no_expand_macros_alltypes:
    name: Test LibArchive (not macro-expanded, -alltypes)
    needs: build_3c
    runs-on: self-hosted
    steps:
      - name: Build LibArchive
        run: |
          mkdir -p ${{env.benchmark_conv_dir}}/no_expand_macros_alltypes
          cd ${{env.benchmark_conv_dir}}/no_expand_macros_alltypes
          tar -xvzf ${{env.benchmark_tar_dir}}/libarchive-3.4.3.tar.gz
          cd libarchive-3.4.3
          cd build
          cmake -DCMAKE_C_COMPILER=${{env.builddir}}/bin/clang -G Ninja -DCMAKE_C_FLAGS="-w -ferror-limit=0 -D_GNU_SOURCE" ..
          bear ninja -l $(nproc) archive

      - name: Convert LibArchive
        run: |
          cd ${{env.benchmark_conv_dir}}/no_expand_macros_alltypes/libarchive-3.4.3
          ${{env.port_tools}}/convert_project.py \
            --skip '/.*/(test|test_utils|tar|cat|cpio|examples|contrib|libarchive_fe)/.*' \
            --prog_name ${{env.builddir}}/bin/3c \
            --extra-3c-arg=-alltypes \
            --project_path . \
            --build_dir build

      - name: Copy 3c stats of LibArchive
        run: |
          cd ${{env.benchmark_conv_dir}}/no_expand_macros_alltypes/libarchive-3.4.3
          mkdir 3c_performance_stats/
          cp *.json 3c_performance_stats/

      - name: Upload 3c stats of LibArchive
        uses: actions/upload-artifact@v2
        with:
          name: LibArchive_no_expand_macros_alltypes
          path: ${{env.benchmark_conv_dir}}/no_expand_macros_alltypes/libarchive-3.4.3/3c_performance_stats/
          retention-days: 5

  test_libarchive_expand_macros_no_alltypes:
    name: Test LibArchive (macro-expanded, no -alltypes)
    needs: build_3c
    runs-on: self-hosted
    steps:
      - name: Build LibArchive
        run: |
          mkdir -p ${{env.benchmark_conv_dir}}/expand_macros_no_alltypes
          cd ${{env.benchmark_conv_dir}}/expand_macros_no_alltypes
          tar -xvzf ${{env.benchmark_tar_dir}}/libarchive-3.4.3.tar.gz
          cd libarchive-3.4.3
          cd build
          cmake -DCMAKE_C_COMPILER=${{env.builddir}}/bin/clang -G Ninja -DCMAKE_C_FLAGS="-w -ferror-limit=0 -D_GNU_SOURCE" ..
          bear ninja -l $(nproc) archive

      - name: Convert LibArchive
        run: |
          cd ${{env.benchmark_conv_dir}}/expand_macros_no_alltypes/libarchive-3.4.3
          ${{env.port_tools}}/convert_project.py \
            --skip '/.*/(test|test_utils|tar|cat|cpio|examples|contrib|libarchive_fe)/.*' \
            --prog_name ${{env.builddir}}/bin/3c \
            --expand_macros_before_conversion \
            --project_path . \
            --build_dir build

      - name: Copy 3c stats of LibArchive
        run: |
          cd ${{env.benchmark_conv_dir}}/expand_macros_no_alltypes/libarchive-3.4.3
          mkdir 3c_performance_stats/
          cp *.json 3c_performance_stats/

      - name: Upload 3c stats of LibArchive
        uses: actions/upload-artifact@v2
        with:
          name: LibArchive_expand_macros_no_alltypes
          path: ${{env.benchmark_conv_dir}}/expand_macros_no_alltypes/libarchive-3.4.3/3c_performance_stats/
          retention-days: 5

  test_libarchive_expand_macros_alltypes:
    name: Test LibArchive (macro-expanded, -alltypes)
    needs: build_3c
    runs-on: self-hosted
    steps:
      - name: Build LibArchive
        run: |
          mkdir -p ${{env.benchmark_conv_dir}}/expand_macros_alltypes
          cd ${{env.benchmark_conv_dir}}/expand_macros_alltypes
          tar -xvzf ${{env.benchmark_tar_dir}}/libarchive-3.4.3.tar.gz
          cd libarchive-3.4.3
          cd build
          cmake -DCMAKE_C_COMPILER=${{env.builddir}}/bin/clang -G Ninja -DCMAKE_C_FLAGS="-w -ferror-limit=0 -D_GNU_SOURCE" ..
          bear ninja -l $(nproc) archive

      - name: Convert LibArchive
        run: |
          cd ${{env.benchmark_conv_dir}}/expand_macros_alltypes/libarchive-3.4.3
          ${{env.port_tools}}/convert_project.py \
            --skip '/.*/(test|test_utils|tar|cat|cpio|examples|contrib|libarchive_fe)/.*' \
            --prog_name ${{env.builddir}}/bin/3c \
            --extra-3c-arg=-alltypes \
            --expand_macros_before_conversion \
            --project_path . \
            --build_dir build

      - name: Copy 3c stats of LibArchive
        run: |
          cd ${{env.benchmark_conv_dir}}/expand_macros_alltypes/libarchive-3.4.3
          mkdir 3c_performance_stats/
          cp *.json 3c_performance_stats/

      - name: Upload 3c stats of LibArchive
        uses: actions/upload-artifact@v2
        with:
          name: LibArchive_expand_macros_alltypes
          path: ${{env.benchmark_conv_dir}}/expand_macros_alltypes/libarchive-3.4.3/3c_performance_stats/
          retention-days: 5

  test_icecast_no_expand_macros_no_alltypes:
    name: Test Icecast (not macro-expanded, no -alltypes)
    needs: build_3c
    runs-on: self-hosted
    steps:
      - name: Build Icecast
        run: |
          mkdir -p ${{env.benchmark_conv_dir}}/no_expand_macros_no_alltypes
          cd ${{env.benchmark_conv_dir}}/no_expand_macros_no_alltypes
          tar -xvzf ${{env.benchmark_tar_dir}}/icecast-2.4.4.tar.gz
          cd icecast-2.4.4
          sed -i '/_GNU_SOURCE/d' configure
          CC="${{env.builddir}}/bin/clang" CFLAGS="-w -ferror-limit=0" ./configure
          bear make -j $(nproc) -l $(nproc) --output-sync

      - name: Convert Icecast
        run: |
          cd ${{env.benchmark_conv_dir}}/no_expand_macros_no_alltypes/icecast-2.4.4
          ${{env.port_tools}}/convert_project.py \
            --prog_name ${{env.builddir}}/bin/3c \
            --project_path .

      - name: Copy 3c stats of Icecast
        run: |
          cd ${{env.benchmark_conv_dir}}/no_expand_macros_no_alltypes/icecast-2.4.4
          mkdir 3c_performance_stats/
          cp *.json 3c_performance_stats/

      - name: Upload 3c stats of Icecast
        uses: actions/upload-artifact@v2
        with:
          name: Icecast_no_expand_macros_no_alltypes
          path: ${{env.benchmark_conv_dir}}/no_expand_macros_no_alltypes/icecast-2.4.4/3c_performance_stats/
          retention-days: 5

  test_icecast_no_expand_macros_alltypes:
    name: Test Icecast (not macro-expanded, -alltypes)
    needs: build_3c
    runs-on: self-hosted
    steps:
      - name: Build Icecast
        run: |
          mkdir -p ${{env.benchmark_conv_dir}}/no_expand_macros_alltypes
          cd ${{env.benchmark_conv_dir}}/no_expand_macros_alltypes
          tar -xvzf ${{env.benchmark_tar_dir}}/icecast-2.4.4.tar.gz
          cd icecast-2.4.4
          sed -i '/_GNU_SOURCE/d' configure
          CC="${{env.builddir}}/bin/clang" CFLAGS="-w -ferror-limit=0" ./configure
          bear make -j $(nproc) -l $(nproc) --output-sync

      - name: Convert Icecast
        run: |
          cd ${{env.benchmark_conv_dir}}/no_expand_macros_alltypes/icecast-2.4.4
          ${{env.port_tools}}/convert_project.py \
            --prog_name ${{env.builddir}}/bin/3c \
            --extra-3c-arg=-alltypes \
            --project_path .

      - name: Copy 3c stats of Icecast
        run: |
          cd ${{env.benchmark_conv_dir}}/no_expand_macros_alltypes/icecast-2.4.4
          mkdir 3c_performance_stats/
          cp *.json 3c_performance_stats/

      - name: Upload 3c stats of Icecast
        uses: actions/upload-artifact@v2
        with:
          name: Icecast_no_expand_macros_alltypes
          path: ${{env.benchmark_conv_dir}}/no_expand_macros_alltypes/icecast-2.4.4/3c_performance_stats/
          retention-days: 5

  test_icecast_expand_macros_no_alltypes:
    name: Test Icecast (macro-expanded, no -alltypes)
    needs: build_3c
    runs-on: self-hosted
    steps:
      - name: Build Icecast
        run: |
          mkdir -p ${{env.benchmark_conv_dir}}/expand_macros_no_alltypes
          cd ${{env.benchmark_conv_dir}}/expand_macros_no_alltypes
          tar -xvzf ${{env.benchmark_tar_dir}}/icecast-2.4.4.tar.gz
          cd icecast-2.4.4
          sed -i '/_GNU_SOURCE/d' configure
          CC="${{env.builddir}}/bin/clang" CFLAGS="-w -ferror-limit=0" ./configure
          bear make -j $(nproc) -l $(nproc) --output-sync

      - name: Convert Icecast
        run: |
          cd ${{env.benchmark_conv_dir}}/expand_macros_no_alltypes/icecast-2.4.4
          ${{env.port_tools}}/convert_project.py \
            --prog_name ${{env.builddir}}/bin/3c \
            --expand_macros_before_conversion \
            --project_path .

      - name: Copy 3c stats of Icecast
        run: |
          cd ${{env.benchmark_conv_dir}}/expand_macros_no_alltypes/icecast-2.4.4
          mkdir 3c_performance_stats/
          cp *.json 3c_performance_stats/

      - name: Upload 3c stats of Icecast
        uses: actions/upload-artifact@v2
        with:
          name: Icecast_expand_macros_no_alltypes
          path: ${{env.benchmark_conv_dir}}/expand_macros_no_alltypes/icecast-2.4.4/3c_performance_stats/
          retention-days: 5

  test_icecast_expand_macros_alltypes:
    name: Test Icecast (macro-expanded, -alltypes)
    needs: build_3c
    runs-on: self-hosted
    steps:
      - name: Build Icecast
        run: |
          mkdir -p ${{env.benchmark_conv_dir}}/expand_macros_alltypes
          cd ${{env.benchmark_conv_dir}}/expand_macros_alltypes
          tar -xvzf ${{env.benchmark_tar_dir}}/icecast-2.4.4.tar.gz
          cd icecast-2.4.4
          sed -i '/_GNU_SOURCE/d' configure
          CC="${{env.builddir}}/bin/clang" CFLAGS="-w -ferror-limit=0" ./configure
          bear make -j $(nproc) -l $(nproc) --output-sync

      - name: Convert Icecast
        run: |
          cd ${{env.benchmark_conv_dir}}/expand_macros_alltypes/icecast-2.4.4
          ${{env.port_tools}}/convert_project.py \
            --prog_name ${{env.builddir}}/bin/3c \
            --extra-3c-arg=-alltypes \
            --expand_macros_before_conversion \
            --project_path .

      - name: Copy 3c stats of Icecast
        run: |
          cd ${{env.benchmark_conv_dir}}/expand_macros_alltypes/icecast-2.4.4
          mkdir 3c_performance_stats/
          cp *.json 3c_performance_stats/

      - name: Upload 3c stats of Icecast
        uses: actions/upload-artifact@v2
        with:
          name: Icecast_expand_macros_alltypes
          path: ${{env.benchmark_conv_dir}}/expand_macros_alltypes/icecast-2.4.4/3c_performance_stats/
          retention-days: 5
